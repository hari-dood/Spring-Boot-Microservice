@Service
public class ProductClient {

    private final WebClient webClient;

    public ProductClient(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("http://localhost:8081/api/products").build();
    }

    public ProductDTO getProductById(Long productId) {
        return webClient.get()
                .uri("/{id}", productId)
                .retrieve()
                .bodyToMono(ProductDTO.class)
                .block();
    }
}

public Cart addToCart(Long userId, Long productId, Integer quantity) {
    // Fetch product details
    Product product = productRepository.findById(productId)
            .orElseThrow(() -> new RuntimeException("Product not found"));

    // Check if the product is already in the user's cart
    Cart cart = cartRepository.findByUserIdAndProductId(userId, productId)
            .orElse(new Cart());

    // Update or add cart item
    cart.setUserId(userId);
    cart.setProductId(productId);
    cart.setQuantity(cart.getQuantity() == null ? quantity : cart.getQuantity() + quantity);
    cart.setTotalPrice(cart.getQuantity() * product.getPrice());

    // Save cart
    return cartRepository.save(cart);
}
